use std::collections::HashMap;

use libc::c_uint;
use once_cell::sync::Lazy;
use windows::Win32::UI::Input::KeyboardAndMouse::*;

use crate::keymaps::keysym::*;

pub static KEYSYM_WIN: Lazy<HashMap<c_uint, VIRTUAL_KEY>> = Lazy::new(|| {
    let mut m = HashMap::new();
    m.insert(XK_A, VK_A);
    m.insert(XK_S, VK_S);
    m.insert(XK_D, VK_D);
    m.insert(XK_F, VK_F);
    m.insert(XK_H, VK_H);
    m.insert(XK_G, VK_G);
    m.insert(XK_Z, VK_Z);
    m.insert(XK_X, VK_X);
    m.insert(XK_C, VK_C);
    m.insert(XK_V, VK_V);
    m.insert(XK_B, VK_B);
    m.insert(XK_W, VK_W);
    m.insert(XK_Q, VK_Q);
    m.insert(XK_E, VK_E);
    m.insert(XK_R, VK_R);
    m.insert(XK_Y, VK_Y);
    m.insert(XK_T, VK_T);
    m.insert(XK_a, VK_A);
    m.insert(XK_s, VK_S);
    m.insert(XK_d, VK_D);
    m.insert(XK_f, VK_H);
    m.insert(XK_h, VK_H);
    m.insert(XK_g, VK_G);
    m.insert(XK_z, VK_Z);
    m.insert(XK_x, VK_X);
    m.insert(XK_c, VK_C);
    m.insert(XK_v, VK_V);
    m.insert(XK_b, VK_B);
    m.insert(XK_q, VK_Q);
    m.insert(XK_w, VK_W);
    m.insert(XK_e, VK_E);
    m.insert(XK_r, VK_R);
    m.insert(XK_y, VK_Y);
    m.insert(XK_t, VK_T);
    m.insert(XK_1, VK_1);
    m.insert(XK_2, VK_2);
    m.insert(XK_3, VK_3);
    m.insert(XK_4, VK_4);
    m.insert(XK_6, VK_6);
    m.insert(XK_5, VK_5);
    m.insert(XK_equal, VK_OEM_PLUS);
    m.insert(XK_plus, VK_OEM_PLUS);
    m.insert(XK_9, VK_9);
    m.insert(XK_7, VK_7);
    m.insert(XK_minus, VK_OEM_MINUS);
    m.insert(XK_underscore, VK_OEM_MINUS);
    m.insert(XK_0, VK_0);
    m.insert(XK_bracketright, VK_OEM_6);
    m.insert(XK_braceright, VK_OEM_6);
    m.insert(XK_O, VK_O);
    m.insert(XK_o, VK_O);
    m.insert(XK_U, VK_U);
    m.insert(XK_u, VK_U);
    m.insert(XK_bracketleft, VK_OEM_4);
    m.insert(XK_braceleft, VK_OEM_4);
    m.insert(XK_I, VK_I);
    m.insert(XK_i, VK_I);
    m.insert(XK_P, VK_P);
    m.insert(XK_p, VK_P);
    m.insert(XK_L, VK_L);
    m.insert(XK_l, VK_L);
    m.insert(XK_J, VK_J);
    m.insert(XK_j, VK_J);
    m.insert(XK_quotedbl, VK_OEM_7);
    m.insert(XK_k, VK_K);
    m.insert(XK_semicolon, VK_OEM_1);
    m.insert(XK_BackSpace, VK_BACK);
    m.insert(XK_comma, VK_OEM_COMMA);
    m.insert(XK_slash, VK_OEM_COMMA);
    m.insert(XK_n, VK_N);
    m.insert(XK_m, VK_M);
    m.insert(XK_period, VK_OEM_PERIOD);
    m.insert(XK_greater, VK_OEM_PERIOD);
    m.insert(XK_grave, VK_OEM_MINUS);
    m.insert(XK_asciitilde, VK_OEM_MINUS); // TODO: check this
    m.insert(XK_KP_Decimal, VK_DECIMAL);
    m.insert(XK_KP_Multiply, VK_MULTIPLY);
    m.insert(XK_KP_Add, VK_ADD);
    m.insert(XK_Clear, VK_OEM_CLEAR);
    m.insert(XK_KP_Divide, VK_DIVIDE);
    m.insert(XK_KP_Enter, VK_RETURN);
    m.insert(XK_KP_Subtract, VK_SUBTRACT);
    m.insert(XK_KP_Equal, VK_OEM_PLUS);
    m.insert(XK_KP_0, VK_NUMPAD0);
    m.insert(XK_KP_1, VK_NUMPAD1);
    m.insert(XK_KP_2, VK_NUMPAD2);
    m.insert(XK_KP_3, VK_NUMPAD3);
    m.insert(XK_KP_4, VK_NUMPAD4);
    m.insert(XK_KP_5, VK_NUMPAD5);
    m.insert(XK_KP_6, VK_NUMPAD6);
    m.insert(XK_KP_7, VK_NUMPAD7);
    m.insert(XK_KP_8, VK_NUMPAD8);
    m.insert(XK_KP_9, VK_NUMPAD9);
    m.insert(XK_Tab, VK_TAB);
    m.insert(XK_space, VK_SPACE);
    m.insert(XK_Delete, VK_DELETE);
    m.insert(XK_Escape, VK_ESCAPE);
    m.insert(XK_Alt_L, VK_MENU);
    m.insert(XK_Shift_L, VK_LSHIFT);
    m.insert(XK_Caps_Lock, VK_CAPITAL);
    m.insert(XK_Meta_L, VK_MENU);
    m.insert(XK_Super_L, VK_LWIN);
    m.insert(XK_Control_L, VK_CONTROL);
    m.insert(XK_Alt_R, VK_MENU);
    m.insert(XK_Shift_R, VK_RSHIFT);
    m.insert(XK_Meta_R, VK_MENU);
    m.insert(XK_Super_R, VK_LWIN);
    m.insert(XK_Control_R, VK_CONTROL);
    m.insert(XK_F17, VK_F17);
    m.insert(XK_F18, VK_F18);
    m.insert(XK_F19, VK_F19);
    m.insert(XK_F20, VK_F20);
    m.insert(XK_F5, VK_F5);
    m.insert(XK_F6, VK_F6);
    m.insert(XK_F7, VK_F7);
    m.insert(XK_F3, VK_F3);
    m.insert(XK_F8, VK_F8);
    m.insert(XK_F9, VK_F9);
    m.insert(XK_F11, VK_F11);
    m.insert(XK_F13, VK_F13);
    m.insert(XK_F16, VK_F16);
    m.insert(XK_F14, VK_F14);
    m.insert(XK_F10, VK_F10);
    m.insert(XK_F12, VK_F12);
    m.insert(XK_F15, VK_F15);
    m.insert(XK_Help, VK_HELP);
    m.insert(XK_Home, VK_HOME);
    m.insert(XK_Page_Up, VK_PRIOR);
    m.insert(XK_F4, VK_F4);
    m.insert(XK_End, VK_END);
    m.insert(XK_F2, VK_F2);
    m.insert(XK_Page_Down, VK_NEXT);
    m.insert(XK_F1, VK_F1);
    m.insert(XK_leftarrow, VK_LEFT);
    m.insert(XK_rightarrow, VK_RIGHT);
    m.insert(XK_downarrow, VK_DOWN);
    m.insert(XK_uparrow, VK_UP);
    m
});
