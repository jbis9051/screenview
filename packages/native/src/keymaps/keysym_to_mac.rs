use std::collections::HashMap;

use libc::c_uint;
use once_cell::sync::Lazy;

use crate::keymaps::{
    keycode_mac::{KeyCodeMac, KeyCodeMac::*},
    keysym::*,
};

pub static KEYSYM_MAC: Lazy<HashMap<c_uint, KeyCodeMac>> = Lazy::new(|| {
    let mut m = HashMap::new();
    m.insert(XK_A, kVK_ANSI_A);
    m.insert(XK_S, kVK_ANSI_S);
    m.insert(XK_D, kVK_ANSI_D);
    m.insert(XK_F, kVK_ANSI_F);
    m.insert(XK_H, kVK_ANSI_H);
    m.insert(XK_G, kVK_ANSI_G);
    m.insert(XK_Z, kVK_ANSI_Z);
    m.insert(XK_X, kVK_ANSI_X);
    m.insert(XK_C, kVK_ANSI_C);
    m.insert(XK_V, kVK_ANSI_V);
    m.insert(XK_B, kVK_ANSI_B);
    m.insert(XK_Q, kVK_ANSI_Q);
    m.insert(XK_W, kVK_ANSI_W);
    m.insert(XK_E, kVK_ANSI_E);
    m.insert(XK_R, kVK_ANSI_R);
    m.insert(XK_Y, kVK_ANSI_Y);
    m.insert(XK_T, kVK_ANSI_T);
    m.insert(XK_a, kVK_ANSI_A);
    m.insert(XK_s, kVK_ANSI_S);
    m.insert(XK_d, kVK_ANSI_D);
    m.insert(XK_f, kVK_ANSI_F);
    m.insert(XK_h, kVK_ANSI_H);
    m.insert(XK_g, kVK_ANSI_G);
    m.insert(XK_z, kVK_ANSI_Z);
    m.insert(XK_x, kVK_ANSI_X);
    m.insert(XK_c, kVK_ANSI_C);
    m.insert(XK_v, kVK_ANSI_V);
    m.insert(XK_b, kVK_ANSI_B);
    m.insert(XK_q, kVK_ANSI_Q);
    m.insert(XK_w, kVK_ANSI_W);
    m.insert(XK_e, kVK_ANSI_E);
    m.insert(XK_r, kVK_ANSI_R);
    m.insert(XK_y, kVK_ANSI_Y);
    m.insert(XK_t, kVK_ANSI_T);
    m.insert(XK_1, kVK_ANSI_1);
    m.insert(XK_2, kVK_ANSI_2);
    m.insert(XK_3, kVK_ANSI_3);
    m.insert(XK_4, kVK_ANSI_4);
    m.insert(XK_6, kVK_ANSI_6);
    m.insert(XK_5, kVK_ANSI_5);
    m.insert(XK_equal, kVK_ANSI_Equal);
    m.insert(XK_plus, kVK_ANSI_Equal);
    m.insert(XK_9, kVK_ANSI_9);
    m.insert(XK_7, kVK_ANSI_7);
    m.insert(XK_minus, kVK_ANSI_Minus);
    m.insert(XK_underscore, kVK_ANSI_8);
    m.insert(XK_0, kVK_ANSI_0);
    m.insert(XK_bracketright, kVK_ANSI_RightBracket);
    m.insert(XK_braceright, kVK_ANSI_RightBracket);
    m.insert(XK_O, kVK_ANSI_O);
    m.insert(XK_o, kVK_ANSI_O);
    m.insert(XK_U, kVK_ANSI_U);
    m.insert(XK_u, kVK_ANSI_U);
    m.insert(XK_bracketleft, kVK_ANSI_LeftBracket);
    m.insert(XK_braceleft, kVK_ANSI_LeftBracket);
    m.insert(XK_I, kVK_ANSI_I);
    m.insert(XK_i, kVK_ANSI_I);
    m.insert(XK_P, kVK_ANSI_P);
    m.insert(XK_p, kVK_ANSI_P);
    m.insert(XK_L, kVK_ANSI_L);
    m.insert(XK_l, kVK_ANSI_L);
    m.insert(XK_J, kVK_ANSI_J);
    m.insert(XK_j, kVK_ANSI_J);
    m.insert(XK_quotedbl, kVK_ANSI_Quote);
    m.insert(XK_k, kVK_ANSI_K);
    m.insert(XK_semicolon, kVK_ANSI_Semicolon);
    m.insert(XK_BackSpace, kVK_ANSI_Backslash);
    m.insert(XK_comma, kVK_ANSI_Comma);
    m.insert(XK_slash, kVK_ANSI_Slash);
    m.insert(XK_n, kVK_ANSI_N);
    m.insert(XK_m, kVK_ANSI_M);
    m.insert(XK_period, kVK_ANSI_Period);
    m.insert(XK_greater, kVK_ANSI_Period);
    m.insert(XK_grave, kVK_ANSI_Grave);
    m.insert(XK_asciitilde, kVK_ANSI_Grave);
    m.insert(XK_KP_Decimal, kVK_ANSI_KeypadDecimal);
    m.insert(XK_KP_Multiply, kVK_ANSI_KeypadMultiply);
    m.insert(XK_KP_Add, kVK_ANSI_KeypadPlus);
    m.insert(XK_Clear, kVK_ANSI_KeypadClear);
    m.insert(XK_KP_Divide, kVK_ANSI_KeypadDivide);
    m.insert(XK_KP_Enter, kVK_ANSI_KeypadEnter);
    m.insert(XK_KP_Subtract, kVK_ANSI_KeypadMinus);
    m.insert(XK_KP_Equal, kVK_ANSI_KeypadEquals);
    m.insert(XK_KP_0, kVK_ANSI_Keypad0);
    m.insert(XK_KP_1, kVK_ANSI_Keypad1);
    m.insert(XK_KP_2, kVK_ANSI_Keypad2);
    m.insert(XK_KP_3, kVK_ANSI_Keypad3);
    m.insert(XK_KP_4, kVK_ANSI_Keypad4);
    m.insert(XK_KP_5, kVK_ANSI_Keypad5);
    m.insert(XK_KP_6, kVK_ANSI_Keypad6);
    m.insert(XK_KP_7, kVK_ANSI_Keypad7);
    m.insert(XK_KP_8, kVK_ANSI_Keypad8);
    m.insert(XK_KP_9, kVK_ANSI_Keypad9);
    // kVK_Return);
    m.insert(XK_Tab, kVK_Tab);
    m.insert(XK_space, kVK_Space);
    m.insert(XK_Delete, kVK_Delete);
    m.insert(XK_Escape, kVK_Escape);
    m.insert(XK_Alt_L, kVK_Command);
    m.insert(XK_Shift_L, kVK_Shift);
    m.insert(XK_Caps_Lock, kVK_CapsLock);
    m.insert(XK_Meta_L, kVK_Option);
    m.insert(XK_Super_L, kVK_Option);
    m.insert(XK_Control_L, kVK_Control);
    m.insert(XK_Alt_R, kVK_RightCommand);
    m.insert(XK_Shift_R, kVK_RightShift);
    m.insert(XK_Meta_R, kVK_RightOption);
    m.insert(XK_Super_R, kVK_RightOption);
    m.insert(XK_Control_R, kVK_RightControl);
    //kVK_Function);
    m.insert(XK_F17, kVK_F17);
    // kVK_VolumeUp);
    // kVK_VolumeDown);
    // kVK_Mute);
    m.insert(XK_F18, kVK_F18);
    m.insert(XK_F19, kVK_F19);
    m.insert(XK_F20, kVK_F20);
    m.insert(XK_F5, kVK_F5);
    m.insert(XK_F6, kVK_F6);
    m.insert(XK_F7, kVK_F7);
    m.insert(XK_F3, kVK_F3);
    m.insert(XK_F8, kVK_F8);
    m.insert(XK_F9, kVK_F9);
    m.insert(XK_F11, kVK_F11);
    m.insert(XK_F13, kVK_F13);
    m.insert(XK_F16, kVK_F16);
    m.insert(XK_F14, kVK_F14);
    m.insert(XK_F10, kVK_F10);
    m.insert(XK_F12, kVK_F12);
    m.insert(XK_F15, kVK_F15);
    m.insert(XK_Help, kVK_Help);
    m.insert(XK_Home, kVK_Home);
    m.insert(XK_Page_Up, kVK_PageUp);
    //kVK_ForwardDelete
    m.insert(XK_F4, kVK_F4);
    m.insert(XK_End, kVK_End);
    m.insert(XK_F2, kVK_F2);
    m.insert(XK_Page_Down, kVK_PageDown);
    m.insert(XK_F1, kVK_F1);
    m.insert(XK_leftarrow, kVK_LeftArrow);
    m.insert(XK_rightarrow, kVK_RightArrow);
    m.insert(XK_downarrow, kVK_DownArrow);
    m.insert(XK_uparrow, kVK_UpArrow);
    /*8 kVK_ISO_Section);
    kVK_JIS_Yen);
    kVK_JIS_Underscore);
    kVK_JIS_KeypadComma);
    kVK_JIS_Eisu);
    kVK_JIS_Kana,*/
    m
});
